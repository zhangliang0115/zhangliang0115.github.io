import{_ as i,r as t,o as s,c,b as e,d as a,e as n,a as d}from"./app-b6485265.js";const o={},h=e("h1",{id:"docker-基本操作",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-基本操作","aria-hidden":"true"},"#"),a(" Docker 基本操作")],-1),l={href:"https://www.bilibili.com/video/av17854410",target:"_blank",rel:"noopener noreferrer"},p=d('<h2 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器" aria-hidden="true">#</a> 启动容器</h2><h3 id="单次执行" tabindex="-1"><a class="header-anchor" href="#单次执行" aria-hidden="true">#</a> 单次执行</h3><p>docker run image [command] [arg]</p><h3 id="启动交互式容器" tabindex="-1"><a class="header-anchor" href="#启动交互式容器" aria-hidden="true">#</a> 启动交互式容器</h3><p>docker run -i -t image /bin/bash</p><p>​ -i --interactive=true|false 默认 false 打开标准时输入</p><p>​ -t --tty=truye|false 默认 false 给docker 分配一个伪 tty 终端</p><h2 id="查看容器" tabindex="-1"><a class="header-anchor" href="#查看容器" aria-hidden="true">#</a> 查看容器</h2><p>docker ps [-a] [-l]</p><p>​ docker ps 正在运行的容器</p><p>​ -a 所有的容器</p><p>​ -l 最新创建的容器</p><h2 id="查看已创建容器详情" tabindex="-1"><a class="header-anchor" href="#查看已创建容器详情" aria-hidden="true">#</a> 查看已创建容器详情</h2><p>docker inspect [id] [name]</p><h2 id="自定义容器名字" tabindex="-1"><a class="header-anchor" href="#自定义容器名字" aria-hidden="true">#</a> 自定义容器名字</h2><p>docker run --name=自定义名称 image</p><h2 id="重新启动停止的容器" tabindex="-1"><a class="header-anchor" href="#重新启动停止的容器" aria-hidden="true">#</a> 重新启动停止的容器</h2><p>docker start [-i] 容器名称</p><h2 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器" aria-hidden="true">#</a> 删除容器</h2><p>docker rm [id] [name]</p><h2 id="删除所有已停止的容器" tabindex="-1"><a class="header-anchor" href="#删除所有已停止的容器" aria-hidden="true">#</a> 删除所有已停止的容器</h2><p>docker container prune</p><h2 id="守护式容器" tabindex="-1"><a class="header-anchor" href="#守护式容器" aria-hidden="true">#</a> 守护式容器</h2><p>ctrl+p ctrl+q</p><h2 id="附加到运行中的容器-进入运行中容器" tabindex="-1"><a class="header-anchor" href="#附加到运行中的容器-进入运行中容器" aria-hidden="true">#</a> 附加到运行中的容器（进入运行中容器）</h2><p>docker attach [id] [name]</p><h2 id="启动守护式容器" tabindex="-1"><a class="header-anchor" href="#启动守护式容器" aria-hidden="true">#</a> 启动守护式容器</h2><p>docker run -d 镜像名 [command] [arg]</p><h2 id="查看容器日志" tabindex="-1"><a class="header-anchor" href="#查看容器日志" aria-hidden="true">#</a> 查看容器日志</h2><p>docker logs [-f] [-t] [--tail] 容器名</p><p>​ -f --follows=true|false 默认false 一直跟踪日志的变化并返回</p><p>​ -t --timestamps=true|false 默认false 在返回的结果上加上时间戳</p><p>​ --tail=&quot;all&quot; 返回结尾处多少数量的日志</p><h2 id="查看容器内进程" tabindex="-1"><a class="header-anchor" href="#查看容器内进程" aria-hidden="true">#</a> 查看容器内进程</h2><p>docker top 容器名</p><h2 id="在运行中的容器内启动新进程" tabindex="-1"><a class="header-anchor" href="#在运行中的容器内启动新进程" aria-hidden="true">#</a> 在运行中的容器内启动新进程</h2><p>docker exec [-d] [-i] [-t] 容器名 [command] [arg]</p><h2 id="停止守护式容器" tabindex="-1"><a class="header-anchor" href="#停止守护式容器" aria-hidden="true">#</a> 停止守护式容器</h2><p>docker stop 容器名</p><p>docker kill 容器名</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a> ================================</h1><h2 id="设置容器的端口映射" tabindex="-1"><a class="header-anchor" href="#设置容器的端口映射" aria-hidden="true">#</a> 设置容器的端口映射</h2><p>-P,--publish-all=true|false 默认false</p><p>​ docker run -P -i -t ubuntu /bin/bash</p><p>docker run -p 80 -i -t ubuntu /bin/bash</p><p>docker run -p 8080:80 -i -t ubuntu /bin/bash</p><p>docker run -p 0.0.0.0:80 -i -t ubuntu /bin/bash</p><p>docker run -p 0.0.0.0:8080:80 -i -t ubuntu /bin/bash</p><h2 id="查看端口映射" tabindex="-1"><a class="header-anchor" href="#查看端口映射" aria-hidden="true">#</a> 查看端口映射</h2><p>docker port 容器名称</p><h2 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像" aria-hidden="true">#</a> 删除镜像</h2><p>docker rmi 镜像:tag</p><h2 id="删除虚悬的镜像" tabindex="-1"><a class="header-anchor" href="#删除虚悬的镜像" aria-hidden="true">#</a> 删除虚悬的镜像</h2><p>docker image prune</p><p>=====================================================</p><h2 id="使用-dockerfile-构建镜像" tabindex="-1"><a class="header-anchor" href="#使用-dockerfile-构建镜像" aria-hidden="true">#</a> 使用 Dockerfile 构建镜像</h2><p>docker build [options] path | url|-</p><p>​ --force-rm=false</p><p>​ --no-cache=false</p><p>​ --pull=false</p><p>​ -q,--quiet=false</p><p>​ --rm=true</p><p>​ -t,--tag=&quot;&quot;</p><h2 id="镜像加速" tabindex="-1"><a class="header-anchor" href="#镜像加速" aria-hidden="true">#</a> 镜像加速</h2>',64),u={href:"https://www.cnblogs.com/atuotuo/p/6264800.html#_label0",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"https://dev.aliyun.com/search.html",-1),b={href:"https://cr.console.aliyun.com/cn-hangzhou/instances/images?search=nginx",target:"_blank",rel:"noopener noreferrer"},k=d(`<p>sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39; { &quot;registry-mirrors&quot;: [&quot;https://8gunnt86.mirror.aliyuncs.com&quot;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker</p><h2 id="权限问题" tabindex="-1"><a class="header-anchor" href="#权限问题" aria-hidden="true">#</a> 权限问题</h2><p>--privileged=true</p><p>Dockerfile 指令</p><p><img src="https://note.youdao.com/yws/public/resource/24c16b234326541cbc49d6e2b286429a/xmlnote/B6A3EA4176D14E309FAC271FF9C01A03/3545" alt="docker指令"></p><p>===========================</p><h1 id="迁移与备份" tabindex="-1"><a class="header-anchor" href="#迁移与备份" aria-hidden="true">#</a> 迁移与备份</h1><h2 id="容器保存为镜像" tabindex="-1"><a class="header-anchor" href="#容器保存为镜像" aria-hidden="true">#</a> 容器保存为镜像</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker commit mynginx mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="镜像备份" tabindex="-1"><a class="header-anchor" href="#镜像备份" aria-hidden="true">#</a> 镜像备份</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker save -o mynginx.tar mynginx_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="镜像恢复与迁移" tabindex="-1"><a class="header-anchor" href="#镜像恢复与迁移" aria-hidden="true">#</a> 镜像恢复与迁移</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker load -i mynginx.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="docker-网络" tabindex="-1"><a class="header-anchor" href="#docker-网络" aria-hidden="true">#</a> docker 网络</h1><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker network create 网络名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">default</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span>
      <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>pre<span class="token punctuation">-</span>existing<span class="token punctuation">-</span>network
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://blog.csdn.net/Kiloveyousmile/article/details/79830810</p><h1 id="docker网络基础-docker跨主机容器访问通信" tabindex="-1"><a class="header-anchor" href="#docker网络基础-docker跨主机容器访问通信" aria-hidden="true">#</a> Docker网络基础---Docker跨主机容器访问通信</h1><p>https://www.linuxidc.com/Linux/2016-10/136354.htm</p><p>时间同步</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22);function x(f,v){const r=t("ExternalLinkIcon");return s(),c("div",null,[h,e("p",null,[e("a",l,[a("https://www.bilibili.com/video/av17854410"),n(r)])]),p,e("p",null,[e("a",u,[a("https://www.cnblogs.com/atuotuo/p/6264800.html#_label0"),n(r)])]),m,e("p",null,[e("a",b,[a("https://cr.console.aliyun.com/cn-hangzhou/instances/images?search=nginx"),n(r)])]),k])}const _=i(o,[["render",x],["__file","index.html.vue"]]);export{_ as default};
